# Generated by Django 5.2.4 on 2025-08-05 13:44

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ACodes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PRODNUMB', models.IntegerField(help_text='Product code.')),
                ('ST_CODENUM', models.IntegerField(help_text='A code stock component number.')),
                ('QTY', models.FloatField(help_text='Quantity of this A code stock component.')),
            ],
        ),
        migrations.CreateModel(
            name='AppComb',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('COMBONUMB', models.IntegerField(help_text='Combination product code.')),
                ('DESC', models.CharField(help_text='Name of combination product.', max_length=16)),
                ('GROUP_ID', models.PositiveSmallIntegerField(help_text='Section number for report printing.')),
                ('GROUP_SUB_ID', models.IntegerField(help_text='Order in section for report printing.')),
            ],
        ),
        migrations.CreateModel(
            name='AppProd',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PRODNUMB', models.IntegerField(help_text='Product code.')),
                ('PRODNAME', models.CharField(help_text='Product name.', max_length=16)),
                ('GROUP_ID', models.PositiveSmallIntegerField(help_text='Section number for report printing.')),
                ('GROUP_SUB_ID', models.IntegerField(help_text='Order in section for report printing.')),
                ('MEAL_ID', models.PositiveSmallIntegerField(help_text='Section number for meal price on report.')),
                ('MEAL_SUB_ID', models.IntegerField(help_text='Order in meal section for report printing.')),
                ('DOUBLE_PDNUMB', models.IntegerField(help_text='Corresponding double product code.')),
                ('TRIPLE_PDNUMB', models.IntegerField(help_text='Corresponding triple product code.')),
            ],
        ),
        migrations.CreateModel(
            name='BCodes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PRODNUMB', models.IntegerField(help_text='Product code.')),
                ('ST_CODENUM', models.IntegerField(help_text='B code stock component number.')),
                ('QTY', models.FloatField(help_text='Quantity of this B code stock component.')),
            ],
        ),
        migrations.CreateModel(
            name='CombExt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('COMBONUMB', models.IntegerField(help_text='Combination product code.')),
                ('DESC', models.CharField(help_text='Name of combination product.', max_length=16)),
                ('NAME_ON_MENU', models.CharField(help_text='Name shown on the menu.', max_length=30)),
                ('PROD_DESC', models.TextField(help_text='Description of combination product.', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='CombTb',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('COMBONUMB', models.IntegerField(help_text='Combination product code.')),
                ('DESC', models.CharField(help_text='Name of combination product.', max_length=16)),
                ('T_COMB_NUM', models.IntegerField(help_text='Trade up combination product code.')),
                ('EAT_VAT_CLASS', models.PositiveSmallIntegerField(help_text='VAT class for Eatin order.')),
                ('TAKE_VAT_CLASS', models.PositiveSmallIntegerField(help_text='VAT class for Takeaway order.')),
                ('VATPR', models.IntegerField(help_text='Current price incl. VAT (standard price).')),
                ('T_VATPR', models.IntegerField(help_text='Trade up price incl. VAT (standard price).')),
                ('VATPR_2', models.IntegerField(help_text='Current price incl. VAT (price band 2).')),
                ('T_VATPR_2', models.IntegerField(help_text='Trade up price incl. VAT (price band 2).')),
                ('VATPR_3', models.IntegerField(help_text='Current price incl. VAT (price band 3).')),
                ('T_VATPR_3', models.IntegerField(help_text='Trade up price incl. VAT (price band 3).')),
                ('VATPR_4', models.IntegerField(help_text='Current price incl. VAT (price band 4).')),
                ('T_VATPR_4', models.IntegerField(help_text='Trade up price incl. VAT (price band 4).')),
                ('VATPR_5', models.IntegerField(help_text='Current price incl. VAT (price band 5).')),
                ('T_VATPR_5', models.IntegerField(help_text='Trade up price incl. VAT (price band 5).')),
                ('VATPR_6', models.IntegerField(help_text='Current price incl. VAT (price band 6).')),
                ('T_VATPR_6', models.IntegerField(help_text='Trade up price incl. VAT (price band 6).')),
            ],
        ),
        migrations.CreateModel(
            name='CompPro',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('COMBONUMB', models.IntegerField(help_text='Combination product code.')),
                ('PRODNUMB', models.IntegerField(help_text='Product code of compulsory product.')),
                ('T_PRODNUMB', models.IntegerField(help_text='Trade up product code (0 if none).')),
            ],
        ),
        migrations.CreateModel(
            name='GroupTb',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('GROUP_ID', models.PositiveSmallIntegerField(help_text='Section number on report.')),
                ('GROUP_NAME', models.CharField(help_text='Section name.', max_length=16)),
                ('SOURCE_TYPE', models.CharField(help_text="'P' for products, 'C' for combinations.", max_length=1)),
                ('MEAL_GROUP', models.PositiveSmallIntegerField(help_text='Section number for meal products.')),
            ],
        ),
        migrations.CreateModel(
            name='KMeal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PRODNUMB', models.IntegerField(help_text='Product code.')),
                ('TAKEAWAY', models.IntegerField(help_text='Total number sold as takeaway meals on the given date.')),
                ('EATIN', models.IntegerField(help_text='Total number sold as eatin meals on the given date.')),
            ],
        ),
        migrations.CreateModel(
            name='KPro',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PRODNUMB', models.IntegerField(help_text='Product or combination product code.')),
                ('COMBO', models.BooleanField(help_text='True if combination product, else False.')),
                ('TAKEAWAY', models.IntegerField(help_text='Total number sold as takeaway on the given date.')),
                ('EATIN', models.IntegerField(help_text='Total number sold as eatin on the given date.')),
                ('WASTE', models.IntegerField(help_text='Total entered as Cooked Waste on the given date.')),
                ('STAFF', models.IntegerField(help_text='Total entered as Crew Food on the given date.')),
                ('OPTION', models.IntegerField(help_text='Total chosen as optional product for products on the given date.')),
            ],
        ),
        migrations.CreateModel(
            name='KRev',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('TCASHVAL', models.BigIntegerField(help_text='Cash in drawer (pence) recorded by POS.')),
                ('TCHQVAL', models.BigIntegerField(help_text='Cheques in drawer (pence) recorded by POS.')),
                ('TCARDVAL', models.BigIntegerField(help_text='Card payments (pence) recorded by POS.')),
                ('TONACCOUNT', models.BigIntegerField(help_text='On account payments (pence) recorded by POS.')),
                ('TSTAFFVAL', models.BigIntegerField(help_text='Crew food value (pence) recorded by POS.')),
                ('TWASTEVAL', models.BigIntegerField(help_text='Cooked waste value (pence) recorded by POS.')),
                ('TCOUPVAL', models.BigIntegerField(help_text='Coupons value (pence) recorded by POS.')),
                ('TPAYOUTVA', models.BigIntegerField(help_text='Paid outs (pence) recorded by POS.')),
                ('TTOKENVAL', models.BigIntegerField(help_text='Vouchers value (pence) recorded by POS.')),
                ('TDISCNTVA', models.BigIntegerField(help_text='Combination discount (pence) recorded by POS.')),
                ('TTOKENNOVR', models.BigIntegerField(help_text='Voucher overage (pence) recorded by POS.')),
                ('TGOLARGENU', models.IntegerField(help_text='Number of go large recorded by POS.')),
                ('TMEAL_DISCNT', models.BigIntegerField(help_text='Discount for meals (pence) recorded by POS.')),
                ('ACTCASH', models.BigIntegerField(help_text='Actual cash taken by POS (pence).')),
                ('ACTCHQ', models.BigIntegerField(help_text='Actual cheques taken by POS (pence).')),
                ('ACTCARD', models.BigIntegerField(help_text='Actual card payments taken by card machine (pence).')),
                ('VAT', models.BigIntegerField(help_text='Total VAT due (pence) on the given date.')),
                ('XPV', models.BigIntegerField(help_text='Extended product value (pence) on the given date. Not required.')),
            ],
        ),
        migrations.CreateModel(
            name='KWkVat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('VAT_CLASS', models.PositiveSmallIntegerField(help_text='VAT class.')),
                ('VAT_RATE', models.FloatField(help_text='VAT rate for this class.')),
                ('TOT_VAT_1', models.FloatField(help_text='Total VAT due (Monday).')),
                ('TOT_VAT_2', models.FloatField(help_text='Total VAT due (Tuesday).')),
                ('TOT_VAT_3', models.FloatField(help_text='Total VAT due (Wednesday).')),
                ('TOT_VAT_4', models.FloatField(help_text='Total VAT due (Thursday).')),
                ('TOT_VAT_5', models.FloatField(help_text='Total VAT due (Friday).')),
                ('TOT_VAT_6', models.FloatField(help_text='Total VAT due (Saturday).')),
                ('TOT_VAT_7', models.FloatField(help_text='Total VAT due (Sunday).')),
                ('T_VAL_EXCLVAT_1', models.FloatField(help_text='Total value excluding VAT (Monday).')),
                ('T_VAL_EXCLVAT_2', models.FloatField(help_text='Total value excluding VAT (Tuesday).')),
                ('T_VAL_EXCLVAT_3', models.FloatField(help_text='Total value excluding VAT (Wednesday).')),
                ('T_VAL_EXCLVAT_4', models.FloatField(help_text='Total value excluding VAT (Thursday).')),
                ('T_VAL_EXCLVAT_5', models.FloatField(help_text='Total value excluding VAT (Friday).')),
                ('T_VAL_EXCLVAT_6', models.FloatField(help_text='Total value excluding VAT (Saturday).')),
                ('T_VAL_EXCLVAT_7', models.FloatField(help_text='Total value excluding VAT (Sunday).')),
            ],
        ),
        migrations.CreateModel(
            name='MiscSec',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PRODNUMB', models.IntegerField(help_text='Product code (0 if not a product).')),
                ('PRODNAME', models.CharField(help_text='Product name (blank if not a product).', max_length=16)),
                ('ITEM_DESC', models.CharField(help_text='Description printed in report column.', max_length=20)),
                ('SEQ_ORDER', models.IntegerField(help_text='Order in Section 10 - Miscellaneous on report.')),
            ],
        ),
        migrations.CreateModel(
            name='OptPro',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('COMBONUMB', models.IntegerField(help_text='Combination product code.')),
                ('PRODNUMB', models.IntegerField(help_text='Product code of optional product.')),
                ('T_PRODNUMB', models.IntegerField(help_text='Trade up product code (0 if none).')),
            ],
        ),
        migrations.CreateModel(
            name='PChoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PRODNUMB', models.IntegerField(help_text='Product code.')),
                ('OPT_PRODNUMB', models.IntegerField(help_text='Optional product code for this product.')),
            ],
        ),
        migrations.CreateModel(
            name='PdItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PRODNUMB', models.IntegerField(help_text='Product code.')),
                ('PRODNAME', models.CharField(help_text='Product name.', max_length=16)),
                ('EAT_VAT_CLASS', models.PositiveSmallIntegerField(help_text='VAT class for Eatin order.')),
                ('TAKE_VAT_CLASS', models.PositiveSmallIntegerField(help_text='VAT class for Takeaway order.')),
                ('READBACK_ORD', models.PositiveSmallIntegerField(help_text='Read Back sorting order.')),
                ('MEAL_ONLY', models.BooleanField(help_text='True if only sold as part of meal.')),
                ('MEAL_CODE', models.PositiveSmallIntegerField(help_text='Meal code.')),
                ('MEAL_DRINK', models.PositiveSmallIntegerField(help_text='Meal drink code.')),
                ('T_DRINK_CD', models.IntegerField(help_text='Product code of trade up drink.')),
                ('VATPR', models.IntegerField(help_text='Current price incl. VAT (standard price).')),
                ('DC_VATPR', models.IntegerField(help_text='Discounted price incl. VAT (standard price).')),
                ('VATPR_2', models.IntegerField(help_text='Current price incl. VAT (price band 2).')),
                ('DC_VATPR_2', models.IntegerField(help_text='Discounted price incl. VAT (price band 2).')),
                ('VATPR_3', models.IntegerField(help_text='Current price incl. VAT (price band 3).')),
                ('DC_VATPR_3', models.IntegerField(help_text='Discounted price incl. VAT (price band 3).')),
                ('VATPR_4', models.IntegerField(help_text='Current price incl. VAT (price band 4).')),
                ('DC_VATPR_4', models.IntegerField(help_text='Discounted price incl. VAT (price band 4).')),
                ('VATPR_5', models.IntegerField(help_text='Current price incl. VAT (price band 5).')),
                ('DC_VATPR_5', models.IntegerField(help_text='Discounted price incl. VAT (price band 5).')),
                ('VATPR_6', models.IntegerField(help_text='Current price incl. VAT (price band 6).')),
                ('DC_VATPR_6', models.IntegerField(help_text='Discounted price incl. VAT (price band 6).')),
            ],
        ),
        migrations.CreateModel(
            name='PdVatTb',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('VAT_CLASS', models.PositiveSmallIntegerField(help_text='VAT class.')),
                ('VAT_RATE', models.FloatField(help_text='VAT rate for this class.')),
                ('VAT_DESC', models.CharField(help_text='Description of this VAT class.', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='ProdExt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('PRODNUMB', models.IntegerField(help_text='Product code.')),
                ('PRODNAME', models.CharField(help_text='Name of product.', max_length=16)),
                ('NAME_ON_MENU', models.CharField(help_text='Name shown on the menu.', max_length=30)),
                ('COOK_ZONE', models.PositiveSmallIntegerField(help_text='Cooking zone.')),
                ('PROD_DESC', models.TextField(help_text='Description of product.', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='ShopsTb',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('SHOP_CODE', models.PositiveSmallIntegerField(help_text='Shop code.')),
                ('SHOP_NAME', models.CharField(help_text='Shop name.', max_length=10)),
                ('SHOP_ABBREV', models.CharField(help_text='Shop abbreviation.', max_length=2)),
                ('FRANCHISEE', models.CharField(help_text='Name of franchisee.', max_length=25)),
                ('FULL_NAME', models.CharField(help_text='Company name.', max_length=32)),
                ('ADDRESS_1', models.CharField(help_text='First line of shop address.', max_length=22)),
                ('ADDRESS_2', models.CharField(help_text='Second line of shop address.', max_length=20)),
                ('ADDRESS_3', models.CharField(help_text='Third line of shop address.', max_length=17)),
                ('POST_CODE', models.CharField(help_text='Postcode of shop address.', max_length=8)),
            ],
        ),
        migrations.CreateModel(
            name='StItems',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('CODEALPH', models.CharField(help_text='First part of stock item code (letter).', max_length=1)),
                ('ST_CODENUM', models.IntegerField(help_text='Second part of stock item code (4-digit number).')),
                ('ITEM', models.CharField(help_text='Description for this stock item.', max_length=18)),
            ],
        ),
    ]
