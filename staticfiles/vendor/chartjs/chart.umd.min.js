/* Minimal local Chart implementation (NOT full Chart.js)
 * Purpose: provide a lightweight doughnut chart for payment method share
 * If you need full Chart.js features, replace this file with the official distribution (MIT license).
 */
(function(){
  function clamp(v,min,max){return v<min?min:v>max?max:v;}
  function drawDoughnut(instance){
    const canvas = instance._canvas;
    const ctx = instance.ctx;
    if(!ctx) return;
    const ds = (instance.data.datasets||[])[0];
    const labels = instance.data.labels||[];
    const values = (ds && ds.data)||[];
    const colors = (ds && ds.backgroundColor)||[];
    const W = canvas.width = canvas.clientWidth || 400;
    const H = canvas.height = canvas.clientHeight || 200;
    ctx.clearRect(0,0,W,H);
    const total = values.reduce((a,b)=>a+(+b||0),0) || 1;
    const cx = W/2, cy = H/2;
    const outer = Math.min(W,H)/2 - 6;
    const inner = outer*0.55;
    let start = -Math.PI/2;
    values.forEach((v,i)=>{
      const frac = (+v||0)/total;
      const angle = frac * Math.PI*2;
      ctx.beginPath();
      ctx.moveTo(cx,cy);
      ctx.fillStyle = colors[i] || '#888';
      ctx.arc(cx,cy,outer,start,start+angle,false);
      ctx.lineTo(cx,cy);
      ctx.fill();
      start += angle;
    });
    // Cut-out (inner circle)
    ctx.globalCompositeOperation = 'destination-out';
    ctx.beginPath();
    ctx.arc(cx,cy,inner,0,Math.PI*2,false);
    ctx.fill();
    ctx.globalCompositeOperation = 'source-over';
    // Center text: total
    ctx.fillStyle = '#222';
    ctx.font = '600 14px system-ui, sans-serif';
    const txt = 'Â£'+(total).toFixed(2);
    const tw = ctx.measureText(txt).width;
    ctx.fillText(txt, cx - tw/2, cy+5);
  }
  function MiniChart(canvas, cfg){
    this._canvas = canvas;
    this.ctx = canvas.getContext ? canvas.getContext('2d') : null;
    this.type = cfg.type || 'doughnut';
    this.data = cfg.data || {labels:[], datasets:[]};
    this.options = cfg.options || {};
    this.update = () => {
      if(this.type === 'doughnut') drawDoughnut(this);
    };
    this.update();
  }
  window.Chart = MiniChart;
})();